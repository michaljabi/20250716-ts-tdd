/**
 * OK. Skupmy siÄ™ na tym, JAK powinniÅ›my pisaÄ‡ nasze testy.
 * lepsze podejÅ›cie niÅ¼ a001 ðŸ˜Š.
 *
 * Co jest waÅ¼ne?
 *
 * CÃ³Å¼, NAZWA testu â€” musi wyraÅ¼aÄ‡ to, co chcesz przetestowaÄ‡.
 * SprÃ³buj odpowiedzieÄ‡, co testujesz, a czasem nawet â€“ dlaczego to robisz.
 *
 * STRUKTURA testu powinna wyglÄ…daÄ‡ nastÄ™pujÄ…co: 3x A = Arrange, Act, Assert
 * Nie musisz dawaÄ‡ komentarzy jak poniÅ¼ej (ktÃ³ra czÄ™Å›Ä‡ jest ktÃ³rÄ…) - tutaj sÅ‚uÅ¼y to tylko pokazaniu, jak ma to wyglÄ…daÄ‡
 * NaleÅ¼y jednak trzymaÄ‡ siÄ™ tego stylu struktury (GWT Given/When/Then) wszÄ™dzie tam, gdzie to moÅ¼liwe.
 *
 * Daje czytelnoÅ›Ä‡ i skupienie na poszczegÃ³lnych czÄ™Å›ciach testu.
 *
 * ASSERT â€” staraj siÄ™ tworzyÄ‡ jak najmniej asercji podczas testu.
 * Czasami lepiej jest podzieliÄ‡ to, co testujesz, na 2 przypadki testowe, zamiast robiÄ‡ to w jednym, z wieloma asercjami.
 * OmÃ³wimy to szerzej w nastÄ™pnych przykÅ‚adach, ale pamiÄ™taj o tym.
 * Lepiej jest rÃ³wnieÅ¼ uÅ¼ywaÄ‡ asercji .toEqual() / .toBe() tak dÅ‚ugo, jak to moÅ¼liwe, aby po prostu zachowaÄ‡ prostotÄ™!
 *
 * */

test('should result 30 when 10 added to 20 - [a003]' , () => {
	// Arrange / Given
	const numberA = 10;
	const numberB = 20;
	// Act / When
	const result = numberA + numberB;
	// Assert / Then
	expect(result).toBe(30);
})
