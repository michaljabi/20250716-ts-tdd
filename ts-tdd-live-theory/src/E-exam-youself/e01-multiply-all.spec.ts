/**
 * #e01 Zadanie:
 * Na rozgrzewkÄ™ - zadanie jest Å‚atwiejsze...
 *
 * - NapisaÅ‚em dla ciebie pierwszy test.
 * - Reszta (implementacja i moÅ¼e wiÄ™cej testÃ³w?) naleÅ¼y do Ciebie.
 *
 * Specyfikacja:
 * Napisz funkcjÄ™ mnoÅ¼Ä…cÄ… wszystkie podane argumenty
 *
 * na przykÅ‚ad podany INPUT: 1 2 3 4 5
 *
 * wykona mnoÅ¼enie: 1 * 2 * 3 * 4 * 5
 *
 * i zwrÃ³ci, OUTPUT: 120
 *
 * i tak dalej...
 *
 * Przypadki brzegowe:
 * - nie podano argumentÃ³w - OUTPUT: 0
 * - podany argument zÅ‚ego typu np. string â€” zastosuj "ciche" pominiÄ™cie argumentu np.
 *    - INPUT: 1 2 '3'
 *    - OUTPUT: 2
 *
 *    - INPUT: 2 4 true
 *    - OUTPUT: 8
 *
 *    - INPUT: 3 'ok' '2' 2
 *    - OUTPUT: 6
 * 
 * - jeÅ›li jedna z liczb to dokÅ‚adnie `NaN` - rzuÄ‡ wyjÄ…tek.
 * */

import { multiplyAll } from "./e01-multiply-all";


// UsuÅ„ .skip PRZED napisaniem testÃ³w

/*
* Robimy podejÅ›cie TDD.
*
* ðŸš€|0 - napisz plan testowania....
* 
* 1st - napisz testy
* 2nd - zaimplementuj
* 3rd - refactor
* */

describe('multiplyAll', () => {

	beforeEach(() => {
		expect.hasAssertions();
	})

	it.each([

	])('should multiply N given arguments %o result in: %d - for different kinf of numbers [decimal, nagative, positive etc.]', () => {

		
	})

	it.todo('should return 0 if no arguments given', () => {})


	it.todo('should return 0 if any of argument is 0', () => {})


	it.each([

	])('should silently skip arguments with other than number type (test boolean especially)', () => {

	})

	it.todo('should NOT cast boolean to (false -> 0 | true -> 1) when other then number type', () => {})
	

	it.todo('should return 0 if all of the arguments are different than number', () => {})


	it.todo('should throw error "Cannot multiply by NaN!" if any of arguments is NaN')


})
